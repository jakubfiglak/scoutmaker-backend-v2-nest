// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum UserRole {
  SCOUT
  PLAYMAKER_SCOUT
  ADMIN
}

enum AccountStatus {
  PENDING
  ACTIVE
  BLOCKED
}

model User {
  id                         String        @id @default(cuid())
  role                       UserRole      @default(SCOUT)
  status                     AccountStatus @default(PENDING)
  email                      String        @unique
  firstName                  String
  lastName                   String
  phone                      String?
  city                       String?
  password                   String
  activeRadius               Int           @default(0)
  confirmationCode           String?       @unique
  confirmationCodeExpiryDate DateTime?
  resetPasswordToken         String?       @unique
  resetPasswordExpiryDate    DateTime?
  createdAt                  DateTime      @default(now())
  updatedAt                  DateTime      @updatedAt

  // Relation fields
  region   Region   @relation(fields: [regionId], references: [id])
  regionId String
  clubs    Club[]
  teams    Team[]
  players  Player[]
  matches  Match[]
  notes    Note[]
}

model Country {
  id         String   @id @default(cuid())
  name       String   @unique
  code       String   @unique
  isEuMember Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relation fields
  regions      Region[]
  competitions Competition[]
  clubs        Club[]
  players      Player[]
}

model Region {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation fields
  country           Country                      @relation(fields: [countryId], references: [id])
  countryId         String
  users             User[]
  clubs             Club[]
  competitionGroups RegionsOnCompetitionGroups[]

  @@unique([name, countryId])
}

model Club {
  id         String   @id @default(cuid())
  name       String
  lnpId      String?
  city       String?
  postalCode String?
  street     String?
  website    String?
  twitter    String?
  facebook   String?
  instagram  String?
  isPublic   Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt


  // Relation fields
  country   Country @relation(fields: [countryId], references: [id])
  countryId String
  region    Region  @relation(fields: [regionId], references: [id])
  regionId  String
  author    User    @relation(fields: [authorId], references: [id])
  authorId  String
  teams     Team[]
}

model Team {
  id               String   @id @default(cuid())
  name             String
  minut90url       String?
  transfermarktUrl String?
  lnpId            String?
  isPublic         Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relation fields
  club         Club                       @relation(fields: [clubId], references: [id])
  clubId       String
  author       User                       @relation(fields: [authorId], references: [id])
  authorId     String
  competitions CompetitionParticipation[]
  players      TeamAffiliation[]
  homeMatches  Match[]                    @relation("homeTeam")
  awayMatches  Match[]                    @relation("awayTeam")
}

model Season {
  id        String   @id @default(cuid())
  name      String   @unique
  isActive  Boolean? @unique
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Realation fields
  competitionParticipations CompetitionParticipation[]
  matches                   Match[]
}

enum Gender {
  MALE
  FEMALE
}

model Competition {
  id        String   @id @default(cuid())
  name      String
  level     Int
  gender    Gender   @default(MALE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation fields
  country       Country                    @relation(fields: [countryId], references: [id])
  countryId     String
  ageCategory   CompetitionAgeCategory     @relation(fields: [ageCategoryId], references: [id])
  ageCategoryId String
  type          CompetitionType            @relation(fields: [typeId], references: [id])
  typeId        String
  juniorLevel   CompetitionJuniorLevel?    @relation(fields: [juniorLevelId], references: [id])
  juniorLevelId String?
  clubs         CompetitionParticipation[]
  groups        CompetitionGroup[]
  matches       Match[]

  @@unique([level, countryId])
}

model CompetitionGroup {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation fields
  competition   Competition                  @relation(fields: [competitionId], references: [id])
  competitionId String
  regions       RegionsOnCompetitionGroups[]
  teams         CompetitionParticipation[]
  matches       Match[]

  @@unique([name, competitionId])
}

model RegionsOnCompetitionGroups {
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  // Relation fields
  region    Region           @relation(fields: [regionId], references: [id])
  regionId  String
  group     CompetitionGroup @relation(fields: [groupId], references: [id])
  groupId   String

  @@id([regionId, groupId])
}

model CompetitionAgeCategory {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation fields
  competitions Competition[]
}

model CompetitionType {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation fields
  competitions Competition[]
}

model CompetitionJuniorLevel {
  id        String   @id @default(cuid())
  name      String
  level     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation fields
  competitions Competition[]
}

model CompetitionParticipation {
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  // Relation fields
  team          Team              @relation(fields: [teamId], references: [id])
  teamId        String
  competition   Competition       @relation(fields: [competitionId], references: [id])
  competitionId String
  season        Season            @relation(fields: [seasonId], references: [id])
  seasonId      String
  group         CompetitionGroup? @relation(fields: [groupId], references: [id])
  groupId       String?

  @@id([teamId, competitionId, seasonId])
}

model PlayerPosition {
  id        String   @id @default(cuid())
  name      String
  code      String   @unique()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation fields
  players          Player[]
  playersSecondary SecondaryPositionsOnPlayers[]
  Note             Note[]
}

enum Foot {
  LEFT
  RIGHT
  BOTH
}

model Player {
  id               String   @id @default(cuid())
  firstName        String
  lastName         String
  yearOfBirth      Int
  height           Int?
  weight           Int?
  footed           Foot
  lnpId            String?
  lnpUrl           String?
  minut90id        String?
  minut90url       String?
  transfermarktId  String?
  transfermarktUrl String?
  isPublic         Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relation fields
  country            Country                       @relation(fields: [countryId], references: [id])
  countryId          String
  primaryPosition    PlayerPosition                @relation(fields: [primaryPositionId], references: [id])
  primaryPositionId  String
  author             User                          @relation(fields: [authorId], references: [id])
  authorId           String
  secondaryPositions SecondaryPositionsOnPlayers[]
  teams              TeamAffiliation[]
  notes              Note[]
}

model SecondaryPositionsOnPlayers {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation fields
  player           Player         @relation(fields: [playerId], references: [id])
  playerId         String
  position         PlayerPosition @relation(fields: [playerPositionId], references: [id])
  playerPositionId String

  @@id([playerId, playerPositionId])
}

model TeamAffiliation {
  id        String    @id @default(cuid())
  startDate DateTime
  endDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relation fields
  player   Player @relation(fields: [playerId], references: [id])
  playerId String
  team     Team   @relation(fields: [teamId], references: [id])
  teamId   String
}

model Match {
  id        String   @id @default(cuid())
  date      DateTime
  homeGoals Int?
  awayGoals Int?
  videoUrl  String?
  isPublic  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation fields
  homeTeam      Team              @relation(fields: [homeTeamId], references: [id], name: "homeTeam")
  homeTeamId    String
  awayTeam      Team              @relation(fields: [awayTeamId], references: [id], name: "awayTeam")
  awayTeamId    String
  competition   Competition       @relation(fields: [competitionId], references: [id])
  competitionId String
  group         CompetitionGroup? @relation(fields: [groupId], references: [id])
  groupId       String?
  season        Season            @relation(fields: [seasonId], references: [id])
  seasonId      String
  author        User              @relation(fields: [authorId], references: [id])
  authorId      String
  notes         Note[]
}

model Note {
  id               String   @id @default(cuid())
  shirtNo          Int?
  description      String?
  maxRatingScore   Int?
  rating           Int?
  percentageRating Float?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relation fields
  player           Player?         @relation(fields: [playerId], references: [id])
  playerId         String?
  match            Match?          @relation(fields: [matchId], references: [id])
  matchId          String?
  positionPlayed   PlayerPosition? @relation(fields: [playerPositionId], references: [id])
  playerPositionId String?
  author           User            @relation(fields: [userId], references: [id])
  userId           String
}
