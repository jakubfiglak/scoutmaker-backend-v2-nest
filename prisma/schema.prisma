// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum UserRole {
  SCOUT
  PLAYMAKER_SCOUT
  ADMIN
}

enum AccountStatus {
  PENDING
  ACTIVE
  BLOCKED
}

model User {
  id                         String        @id @default(cuid())
  role                       UserRole      @default(SCOUT)
  status                     AccountStatus @default(PENDING)
  email                      String        @unique
  firstName                  String
  lastName                   String
  phone                      String?
  city                       String?
  password                   String
  activeRadius               Int           @default(0)
  confirmationCode           String?       @unique
  confirmationCodeExpiryDate DateTime?
  resetPasswordToken         String?       @unique
  resetPasswordExpiryDate    DateTime?
  createdAt                  DateTime      @default(now())
  updatedAt                  DateTime      @updatedAt

  // Relation fields
  region   Region @relation(fields: [regionId], references: [id])
  regionId String
  clubs    Club[]
  teams    Team[]
}

model Country {
  id         String   @id @default(cuid())
  name       String   @unique
  code       String   @unique
  isEuMember Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relation fields
  regions      Region[]
  competitions Competition[]
}

model Region {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation fields
  country      Country                 @relation(fields: [countryId], references: [id])
  countryId    String
  users        User[]
  clubs        Club[]
  competitions RegionsOnCompetitions[]

  @@unique([name, countryId])
}

model Club {
  id         String   @id @default(cuid())
  name       String
  lnpId      String?
  city       String?
  postalCode String?
  street     String?
  website    String?
  twitter    String?
  facebook   String?
  instagram  String?
  isPublic   Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt


  // Relation fields
  region   Region @relation(fields: [regionId], references: [id])
  regionId String
  author   User   @relation(fields: [authorId], references: [id])
  authorId String
  teams    Team[]
}

model Team {
  id               String   @id @default(cuid())
  name             String
  minut90url       String?
  transfermarktUrl String?
  lnpId            String?
  isPublic         Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relation fields
  club         Club                       @relation(fields: [clubId], references: [id])
  clubId       String
  author       User                       @relation(fields: [userId], references: [id])
  userId       String
  competitions CompetitionParticipation[]
}

model Season {
  id        String   @id @default(cuid())
  name      String   @unique
  isActive  Boolean? @unique
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Realation fields
  competitionParticipations CompetitionParticipation[]
}

model Competition {
  id          String   @id @default(cuid())
  name        String
  group       String?
  isJunior    Boolean? @default(false)
  isWomen     Boolean? @default(false)
  juniorLevel String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  // TODO: add competition type (league, cup, etc.)

  // Relation fields
  country   Country                    @relation(fields: [countryId], references: [id])
  countryId String
  regions   RegionsOnCompetitions[]
  clubs     CompetitionParticipation[]
}

model RegionsOnCompetitions {
  // Relation fields
  region        Region      @relation(fields: [regionId], references: [id])
  regionId      String
  competition   Competition @relation(fields: [competitionId], references: [id])
  competitionId String

  @@id([regionId, competitionId])
}

model CompetitionParticipation {
  // Relation fields
  team          Team        @relation(fields: [teamId], references: [id])
  teamId        String
  competition   Competition @relation(fields: [competitionId], references: [id])
  competitionId String
  season        Season      @relation(fields: [seasonId], references: [id])
  seasonId      String

  @@id([competitionId, seasonId])
}
